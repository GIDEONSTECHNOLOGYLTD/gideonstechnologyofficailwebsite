/*! jQuery v3.6.0 - Slim build for Gideons Technology */
(function(global, factory) {
  "use strict";
  if (typeof module === "object" && typeof module.exports === "object") {
    module.exports = global.document ?
      factory(global, true) :
      function(w) {
        if (!w.document) {
          throw new Error("jQuery requires a window with a document");
        }
        return factory(w);
      };
  } else {
    factory(global);
  }
})(typeof window !== "undefined" ? window : this, function(window, noGlobal) {
  "use strict";

  var arr = [];
  var getProto = Object.getPrototypeOf;
  var slice = arr.slice;
  var flat = arr.flat ? function(array) {
    return arr.flat.call(array);
  } : function(array) {
    return arr.concat.apply([], array);
  };
  var push = arr.push;
  var indexOf = arr.indexOf;
  var class2type = {};
  var toString = class2type.toString;
  var hasOwn = class2type.hasOwnProperty;
  var fnToString = hasOwn.toString;
  var ObjectFunctionString = fnToString.call(Object);
  var support = {};

  var isFunction = function isFunction(obj) {
    return typeof obj === "function" && typeof obj.nodeType !== "number" &&
      typeof obj.item !== "function";
  };

  var isWindow = function isWindow(obj) {
    return obj != null && obj === obj.window;
  };

  var document = window.document;
  var preservedScriptAttributes = {
    type: true,
    src: true,
    nonce: true,
    noModule: true
  };

  function DOMEval(code, node, doc) {
    doc = doc || document;
    var i, val,
      script = doc.createElement("script");
    script.text = code;
    if (node) {
      for (i in preservedScriptAttributes) {
        val = node[i] || node.getAttribute && node.getAttribute(i);
        if (val) {
          script.setAttribute(i, val);
        }
      }
    }
    doc.head.appendChild(script).parentNode.removeChild(script);
  }

  function toType(obj) {
    if (obj == null) {
      return obj + "";
    }
    return typeof obj === "object" || typeof obj === "function" ?
      class2type[toString.call(obj)] || "object" :
      typeof obj;
  }

  var jQuery = function(selector, context) {
    return new jQuery.fn.init(selector, context);
  };

  jQuery.fn = jQuery.prototype = {
    jquery: "3.6.0",
    constructor: jQuery,
    length: 0,
    toArray: function() {
      return slice.call(this);
    },
    get: function(num) {
      if (num == null) {
        return slice.call(this);
      }
      return num < 0 ? this[num + this.length] : this[num];
    },
    each: function(callback) {
      return jQuery.each(this, callback);
    },
    map: function(callback) {
      return this.pushStack(jQuery.map(this, function(elem, i) {
        return callback.call(elem, i, elem);
      }));
    },
    slice: function() {
      return this.pushStack(slice.apply(this, arguments));
    },
    first: function() {
      return this.eq(0);
    },
    last: function() {
      return this.eq(-1);
    },
    even: function() {
      return this.pushStack(jQuery.grep(this, function(_elem, i) {
        return (i + 1) % 2;
      }));
    },
    odd: function() {
      return this.pushStack(jQuery.grep(this, function(_elem, i) {
        return i % 2;
      }));
    },
    eq: function(i) {
      var len = this.length,
        j = +i + (i < 0 ? len : 0);
      return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
    },
    end: function() {
      return this.prevObject || this.constructor();
    }
  };

  jQuery.extend = jQuery.fn.extend = function() {
    var options, name, src, copy, copyIsArray, clone,
      target = arguments[0] || {},
      i = 1,
      length = arguments.length,
      deep = false;

    if (typeof target === "boolean") {
      deep = target;
      target = arguments[i] || {};
      i++;
    }

    if (typeof target !== "object" && !isFunction(target)) {
      target = {};
    }

    if (i === length) {
      target = this;
      i--;
    }

    for (; i < length; i++) {
      if ((options = arguments[i]) != null) {
        for (name in options) {
          copy = options[name];

          if (name === "__proto__" || target === copy) {
            continue;
          }

          if (deep && copy && (jQuery.isPlainObject(copy) ||
              (copyIsArray = Array.isArray(copy)))) {
            src = target[name];

            if (copyIsArray && !Array.isArray(src)) {
              clone = [];
            } else if (!copyIsArray && !jQuery.isPlainObject(src)) {
              clone = {};
            } else {
              clone = src;
            }
            copyIsArray = false;

            target[name] = jQuery.extend(deep, clone, copy);
          } else if (copy !== undefined) {
            target[name] = copy;
          }
        }
      }
    }
    return target;
  };

  jQuery.extend({
    // Simple utilities
    isReady: true,
    error: function(msg) {
      throw new Error(msg);
    },
    noop: function() {},
    isPlainObject: function(obj) {
      var proto, Ctor;
      if (!obj || toString.call(obj) !== "[object Object]") {
        return false;
      }
      proto = getProto(obj);
      if (!proto) {
        return true;
      }
      Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
      return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
    },
    each: function(obj, callback) {
      var length, i = 0;
      if (isArrayLike(obj)) {
        length = obj.length;
        for (; i < length; i++) {
          if (callback.call(obj[i], i, obj[i]) === false) {
            break;
          }
        }
      } else {
        for (i in obj) {
          if (callback.call(obj[i], i, obj[i]) === false) {
            break;
          }
        }
      }
      return obj;
    },
    makeArray: function(arr, results) {
      var ret = results || [];
      if (arr != null) {
        if (isArrayLike(Object(arr))) {
          jQuery.merge(ret,
            typeof arr === "string" ? [arr] : arr
          );
        } else {
          push.call(ret, arr);
        }
      }
      return ret;
    },
    inArray: function(elem, arr, i) {
      return arr == null ? -1 : indexOf.call(arr, elem, i);
    },
    merge: function(first, second) {
      var len = +second.length,
        j = 0,
        i = first.length;
      for (; j < len; j++) {
        first[i++] = second[j];
      }
      first.length = i;
      return first;
    },
    grep: function(elems, callback, invert) {
      var callbackInverse,
        matches = [],
        i = 0,
        length = elems.length,
        callbackExpect = !invert;
      for (; i < length; i++) {
        callbackInverse = !callback(elems[i], i);
        if (callbackInverse !== callbackExpect) {
          matches.push(elems[i]);
        }
      }
      return matches;
    },
    map: function(elems, callback, arg) {
      var length, value,
        i = 0,
        ret = [];
      if (isArrayLike(elems)) {
        length = elems.length;
        for (; i < length; i++) {
          value = callback(elems[i], i, arg);
          if (value != null) {
            ret.push(value);
          }
        }
      } else {
        for (i in elems) {
          value = callback(elems[i], i, arg);
          if (value != null) {
            ret.push(value);
          }
        }
      }
      return flat(ret);
    }
  });

  function isArrayLike(obj) {
    var length = !!obj && "length" in obj && obj.length,
      type = toType(obj);
    if (isFunction(obj) || isWindow(obj)) {
      return false;
    }
    return type === "array" || length === 0 ||
      typeof length === "number" && length > 0 && (length - 1) in obj;
  }

  var Sizzle = function() {};

  // Initialize a jQuery object
  jQuery.fn.init = function(selector, context) {
    // Simple implementation for demo
    if (selector && typeof selector === "string") {
      var elements = document.querySelectorAll(selector);
      for (var i = 0; i < elements.length; i++) {
        this[i] = elements[i];
      }
      this.length = elements.length;
    } else if (selector && selector.nodeType) {
      this[0] = selector;
      this.length = 1;
    } else if (Array.isArray(selector)) {
      for (var i = 0; i < selector.length; i++) {
        this[i] = selector[i];
      }
      this.length = selector.length;
    }
    return this;
  };

  jQuery.fn.init.prototype = jQuery.fn;

  // Register as a global
  if (!noGlobal) {
    window.jQuery = window.$ = jQuery;
  }

  // Add essential DOM manipulation and event handling
  jQuery.fn.extend({
    on: function(types, selector, data, fn) {
      // Simple implementation
      return this.each(function() {
        var element = this;
        types.split(" ").forEach(function(type) {
          element.addEventListener(type, function(e) {
            fn.call(element, e);
          });
        });
      });
    },
    off: function(types, selector, fn) {
      // Simple implementation
      return this.each(function() {
        var element = this;
        types.split(" ").forEach(function(type) {
          element.removeEventListener(type, fn);
        });
      });
    },
    trigger: function(type, data) {
      // Simple implementation
      return this.each(function() {
        var event = new Event(type);
        this.dispatchEvent(event);
      });
    },
    addClass: function(value) {
      return this.each(function() {
        if (this.classList) {
          this.classList.add(value);
        } else {
          this.className += " " + value;
        }
      });
    },
    removeClass: function(value) {
      return this.each(function() {
        if (this.classList) {
          this.classList.remove(value);
        } else {
          this.className = this.className.replace(new RegExp('(^|\\b)' + value.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
        }
      });
    },
    toggleClass: function(value) {
      return this.each(function() {
        if (this.classList) {
          this.classList.toggle(value);
        } else {
          var classes = this.className.split(' ');
          var existingIndex = classes.indexOf(value);
          if (existingIndex >= 0) {
            classes.splice(existingIndex, 1);
          } else {
            classes.push(value);
          }
          this.className = classes.join(' ');
        }
      });
    },
    hasClass: function(value) {
      return this[0] ? this[0].classList.contains(value) : false;
    },
    html: function(value) {
      if (value === undefined) {
        return this[0] ? this[0].innerHTML : null;
      }
      return this.each(function() {
        this.innerHTML = value;
      });
    },
    text: function(value) {
      if (value === undefined) {
        return this[0] ? this[0].textContent : null;
      }
      return this.each(function() {
        this.textContent = value;
      });
    },
    val: function(value) {
      if (value === undefined) {
        return this[0] ? this[0].value : null;
      }
      return this.each(function() {
        this.value = value;
      });
    },
    append: function(content) {
      return this.each(function() {
        if (typeof content === "string") {
          this.insertAdjacentHTML("beforeend", content);
        } else if (content.nodeType) {
          this.appendChild(content);
        } else if (content instanceof jQuery) {
          this.appendChild(content[0]);
        }
      });
    },
    prepend: function(content) {
      return this.each(function() {
        if (typeof content === "string") {
          this.insertAdjacentHTML("afterbegin", content);
        } else if (content.nodeType) {
          this.insertBefore(content, this.firstChild);
        } else if (content instanceof jQuery) {
          this.insertBefore(content[0], this.firstChild);
        }
      });
    },
    css: function(name, value) {
      if (typeof name === "object") {
        return this.each(function() {
          for (var key in name) {
            this.style[key] = name[key];
          }
        });
      }
      if (value === undefined) {
        return window.getComputedStyle(this[0])[name];
      }
      return this.each(function() {
        this.style[name] = value;
      });
    },
    fadeIn: function(duration, callback) {
      return this.each(function() {
        var element = this;
        element.style.opacity = 0;
        element.style.display = "block";
        var last = +new Date();
        var tick = function() {
          element.style.opacity = +element.style.opacity + (new Date() - last) / (duration || 400);
          last = +new Date();
          if (+element.style.opacity < 1) {
            (window.requestAnimationFrame && requestAnimationFrame(tick)) || setTimeout(tick, 16);
          } else if (callback) {
            callback.call(element);
          }
        };
        tick();
      });
    },
    fadeOut: function(duration, callback) {
      return this.each(function() {
        var element = this;
        var last = +new Date();
        var tick = function() {
          element.style.opacity = +element.style.opacity - (new Date() - last) / (duration || 400);
          last = +new Date();
          if (+element.style.opacity > 0) {
            (window.requestAnimationFrame && requestAnimationFrame(tick)) || setTimeout(tick, 16);
          } else {
            element.style.display = "none";
            if (callback) {
              callback.call(element);
            }
          }
        };
        tick();
      });
    }
  });

  // Enhanced DOM traversal
  jQuery.fn.extend({
    find: function(selector) {
      var results = [];
      this.each(function() {
        var matches = this.querySelectorAll(selector);
        for (var i = 0; i < matches.length; i++) {
          results.push(matches[i]);
        }
      });
      return jQuery(results);
    },
    parent: function() {
      var results = [];
      this.each(function() {
        if (this.parentNode) {
          results.push(this.parentNode);
        }
      });
      return jQuery(results);
    },
    parents: function(selector) {
      var results = [];
      this.each(function() {
        var parent = this.parentNode;
        while (parent && parent !== document) {
          if (selector) {
            if (parent.matches(selector)) {
              results.push(parent);
            }
          } else {
            results.push(parent);
          }
          parent = parent.parentNode;
        }
      });
      return jQuery(results);
    },
    closest: function(selector) {
      var results = [];
      this.each(function() {
        var el = this;
        while (el && el !== document) {
          if (el.matches(selector)) {
            results.push(el);
            break;
          }
          el = el.parentNode;
        }
      });
      return jQuery(results);
    },
    children: function(selector) {
      var results = [];
      this.each(function() {
        var children = this.children;
        for (var i = 0; i < children.length; i++) {
          if (!selector || children[i].matches(selector)) {
            results.push(children[i]);
          }
        }
      });
      return jQuery(results);
    },
    siblings: function(selector) {
      var results = [];
      this.each(function() {
        var el = this;
        var siblings = Array.prototype.filter.call(el.parentNode.children, function(child) {
          return child !== el;
        });
        for (var i = 0; i < siblings.length; i++) {
          if (!selector || siblings[i].matches(selector)) {
            results.push(siblings[i]);
          }
        }
      });
      return jQuery(results);
    },
    next: function() {
      var results = [];
      this.each(function() {
        if (this.nextElementSibling) {
          results.push(this.nextElementSibling);
        }
      });
      return jQuery(results);
    },
    prev: function() {
      var results = [];
      this.each(function() {
        if (this.previousElementSibling) {
          results.push(this.previousElementSibling);
        }
      });
      return jQuery(results);
    }
  });

  // AJAX utilities
  jQuery.extend({
    ajax: function(url, options) {
      if (typeof url === "object") {
        options = url;
        url = undefined;
      }
      options = options || {};
      var xhr = new XMLHttpRequest();
      xhr.open(options.type || "GET", url || options.url, true);
      if (options.contentType) {
        xhr.setRequestHeader("Content-Type", options.contentType);
      }
      xhr.onload = function() {
        if (xhr.status >= 200 && xhr.status < 300) {
          if (options.success) {
            options.success(xhr.responseText);
          }
        } else {
          if (options.error) {
            options.error(xhr);
          }
        }
        if (options.complete) {
          options.complete(xhr);
        }
      };
      xhr.onerror = function() {
        if (options.error) {
          options.error(xhr);
        }
        if (options.complete) {
          options.complete(xhr);
        }
      };
      xhr.send(options.data);
      return this;
    },
    get: function(url, data, success, dataType) {
      return jQuery.ajax({
        url: url,
        type: "GET",
        data: data,
        success: success,
        dataType: dataType
      });
    },
    post: function(url, data, success, dataType) {
      return jQuery.ajax({
        url: url,
        type: "POST",
        data: data,
        success: success,
        dataType: dataType
      });
    }
  });

  // Animation support
  jQuery.fn.extend({
    animate: function(properties, duration, callback) {
      return this.each(function() {
        var element = this;
        var start = {};
        var keys = Object.keys(properties);
        for (var i = 0; i < keys.length; i++) {
          start[keys[i]] = parseFloat(window.getComputedStyle(element)[keys[i]]) || 0;
        }
        var startTime = +new Date();
        function tick() {
          var timePassed = +new Date() - startTime;
          var progress = timePassed / (duration || 400);
          if (progress > 1) progress = 1;
          for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            var propStart = start[key];
            var propEnd = parseFloat(properties[key]);
            var current = propStart + (propEnd - propStart) * progress;
            element.style[key] = current + (key === "opacity" ? "" : "px");
          }
          if (progress < 1) {
            (window.requestAnimationFrame && requestAnimationFrame(tick)) || setTimeout(tick, 16);
          } else if (callback) {
            callback.call(element);
          }
        }
        tick();
      });
    }
  });

  return jQuery;
});